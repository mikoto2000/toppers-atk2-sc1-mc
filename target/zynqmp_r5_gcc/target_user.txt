=====================================================================
                        ZYNQMP_R5ターゲット依存部
                                  Last Modified:2017 Sep 29 22:33:18
=====================================================================

○概要

ZYNQMP_R5依存部は，Xilinx社のZynq Ultrascale+ MPSoC のCortex-R5をサポ
ートしている．サポートしているプロセッサ数は，1～2個であり，ディフォル
トでは2個で動作する．

現状サポートしているボードは次の通りである．

●ボード

動作確認を行ったボードは次の通りである．

・Xilinx ZCU102
・アヴネット UltraZed-EG

●Xilinx SDK

動作確認したXilinx SDKのバージョンは次の通りである．  

  - Xilinx SDK (>2016.4)
  
●コンパイラ

動作確認を行ったGCCは，Xilinx SDK に付属している

   armr5-none-eabi-gcc.exe
   
   gcc version 5.2.1 20151202 (release) [ARM/embedded-5-branch 
   revision 231848] (GNU Tools for ARM Embedded Processors) 
   
である．Xilinx SDKの以下のフォルダにインストールされている．   

SDK\2016.4\gnu\armr5\nt\gcc-arm-none-eabi\bin
   
●デバッグ環境

デバッグ環境としては， Xilnx SDK ないし，京都マイクロコンピュータ製の
Partner-Jet2 によるデバッグの動作確認を行った．

●実行環境

Partner-Jet2を使用する場合は，本カーネルはPLLやDDR等の初期化はu-bootで
実施することを前提としている．

○プロセッサ数

2プロセッサをサポートしている．

○制限事項

現状のコードは次の制限を持つ．

・2コアではデータキャッシュが無効
  ・Cortex-R5はコア間のキャッシュコヒーレント機能を持たないため，２コ
    ア動作時にはキャッシュをOFFとしている．
    
・スピンロックでWFEを使用しない
  ・ZynqMPにおいては，Cortex-R5のコア間でSEV/WEVがディフォルトでは接続
    されてされていないため，スピンロックが取得できなかった場合にWEVに
    よるイベント待ちとしない．
  ・バス負荷を下げるためにはローカルスピンロックの実装が必要である．  

○カーネルのコンフィギュレーション

●カーネルロック方式

ジャイアントロック方式とプロセッサロック方式と細粒度ロック方式をサポー
ト．

●カーネルタイマ方式

グローバルタイマ方式とローカルタイマ方式の両方をサポート．

●スピンロック方式

ネイティブ方式とエミュレーション方式の両方をサポート．ネイティブ方式の
場合の最大数は256個である．


○カーネルの使用リソース

プロセッサ毎にカーネルは以下のリソースを使用する．

・タイマ
  TTC4(0xFF140000)を使用する．
  
・UART
  XUART0/XUART1 を選択可能である．
  切替は Makefile.target の以下のマクロによって実施する．使用するポー
  トを有効とする．
  
  SYSUART_TYPE = UART1
  SYSUART_TYPE = UART2
  
・プロセッサ間割込み
  0番と1番のプロセッサ間割込みを使用する．

・メモリ
  DDRを使用．
  TEXT : 0x7F000000
  DATA : 0x7F800000

○システムログ機能

システムログ機能は，グローバル方式のみが有効である．そのため，Makefile 
の ENABLE_G_SYSLOG を true に定義すること．

○起動時のコアの同期方法

Zynq MP では，リセット後は指定したコア以外の電源はOFFとなっている．

FSBLでは指定したコアの電源を入れる．FMPでは，R5のコア0のみ電源が入った
状態で実行することを想定している．

そのため，FMPカーネルではブート時にコア1の電源をONにする．

1. コア0 : ブート
2. コア0 : コア1のベクターを0x00000000(R5-1 ATCM)に設定する．
3. コア0 : コア1をHaltとして，クロックを許可，リセットを解除する
4. コア0 : ベクターを0x00000000(R5-1 ATCM)にコピーする．
5. コア0 : コア1のHaltを解除する．

○変更履歴
2017/09/29
・共通部 1.4.2 追従．

2017/06/22
・target_config.c
  ロックステップ実行時にデバッグユニットをリセットする処理を無効化

2017/03/07
・最初のリリース

以上．
